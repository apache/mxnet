apply plugin: CppFormatterPlugin

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class CppFormatterPlugin implements Plugin<Project> {

    static def checkClang(File clang) {
        def url = "https://djl-ai.s3.amazonaws.com/build-tools/osx/clang-format"
        if (!clang.exists()) {
            // create the folder and download the executable
            clang.getParentFile().mkdirs()
            clang.append(new URL(url).openStream())
            clang.setExecutable(true)
        }
    }

    static def formatCpp(File f, File clang) {
        if (!f.getName().endsWith(".cc") && !f.getName().endsWith(".h")) {
            return
        }
        ProcessBuilder pb = new ProcessBuilder("${clang.absolutePath}",
                "-style={BasedOnStyle: Google, IndentWidth: 2, ColumnLimit: 120, AlignAfterOpenBracket: DontAlign, SpaceAfterCStyleCast: true}",
                "${f.getAbsolutePath()}")
        Process process = pb.start()
        InputStream is = process.getInputStream()
        return is.text
    }

    void apply(Project project) {

        project.task('formatCpp') {
            doLast {
                if (!System.properties['os.name'].toLowerCase().contains('mac')) {
                    return
                }
                Project rootProject = project.getRootProject()
                def clang = new File("${rootProject.projectDir}/.clang/clang-format")
                checkClang(clang)
                def files = project.fileTree("src").include("**/*.cc")
                for (File f : files) {
                    if (!f.isFile()) {
                        continue
                    }
                    project.logger.info("formatting cpp file: " + f)
                    f.text = formatCpp(f, clang)
                }
            }
        }

        project.task('verifyCpp') {
            doLast {
                if (!System.properties['os.name'].toLowerCase().contains('mac')) {
                    return
                }
                Project rootProject = project.getRootProject()
                def clang = new File("${rootProject.projectDir}/.clang/clang-format")
                checkClang(clang)
                def files = project.fileTree("src").include("**/*.cc")
                for (File f : files) {
                    if (!f.isFile()) {
                        continue
                    }
                    project.logger.info("checking cpp file: " + f)
                    if (f.text != formatCpp(f, clang)) {
                        throw new GradleException("File not formatted: " + f.getAbsolutePath())
                    }
                }
            }
        }
    }
}
