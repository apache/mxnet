/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def testsResults = new TreeMap<>(Comparator.reverseOrder())
gradle.taskGraph.beforeTask { Task task ->
    task.ext.setProperty("startTime", Instant.now())
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (task.name.equals("test") && state.didWork) {
        long duration = Duration.between(task.ext.startTime, Instant.now()).toSeconds()
        testsResults.put(duration, task.project.name);
    }
}

gradle.buildFinished {
    if (gradle.startParameter.taskNames.contains("build") && !testsResults.isEmpty()) {
        int count = 0;
        println "========== Test duration =========="
        for (Map.Entry<Long, String> entry : testsResults.entrySet()) {
            if (count++ > 5) {
                break;
            }
            println "\t${entry.value}:\t${entry.key}s"
        }
    }
}
